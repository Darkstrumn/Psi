buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven {
            url "https://maven.tterrag.com/"
        }
        jcenter()
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.27.2"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'pmd'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

def mc_version = "1.16.2"
version = "${config.version}-${config.build_number}"
group = "vazkii.${config.mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

minecraft {
    mappings channel: "snapshot", version: "20200801-mixed-1.16.1"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            properties 'fml.earlyprogresswindow': 'false'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                psi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            singleInstance(true)
            mods {
                psi {
                    source sourceSets.main
                }
            }
        }
        data {
            properties 'forge.logging.markers': 'REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'
            workingDirectory project.file('run')
            mods {
                psi {
                    source sourceSets.main
                }
            }
            args '--mod', 'psi', '--all',
                    '--existing', file('src/main/resources/'),
                    '--output', file('src/generated/resources/')
        }
    }
}

repositories {
    maven {
        // for Patchouli
        name "blamejared"
        url "http://maven.blamejared.com/"
    }
    maven {
        // for JEI
        name "promwml16"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        //yarn2mcp
        name "yarn2mcp"
        url "https://maven.tterrag.com"
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${mc_version}-33.0.5"

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.16-40:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16-40")

    compileOnly fg.deobf("mezz.jei:jei-1.16.2:7.1.0.11:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.2:7.1.0.11")

}

spotless {
    enforceCheck = false // workaround around jenkins having wrong line endings in some files
    // we explicitly check in github actions builds
    java {
        targetExclude '**/Gamma.java'

        indentWithTabs()
        licenseHeaderFile( 'spotless/license_template.txt')
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
    }
}

pmd {
    toolVersion '6.22.0'
    incrementalAnalysis.set(true)
    ruleSets.clear()
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}


task checkSyntax {
    dependsOn spotlessJavaCheck, pmdMain
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}


processResources {
    // replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version and mcversion
        expand 'version': project.version
    }

    // copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml', '**/psd/**'
    }
}

task srcJar(type: Jar) {
    from(sourceSets.main.java)
    classifier = 'sources'
}

task apiJar(type: Jar) {
    // Remove sources from the api jar when MinecraftForge/ForgeGradle#369 is fixed
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'vazkii/psi/api/**'

    classifier = 'api'
}

artifacts {
    archives srcJar, apiJar
}

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    //rename the default output, for some better... sanity with scipts
    archiveName = "${baseName} ${version}.${extension}"

    manifest {
        attributes([
                "Specification-Title": "${config.mod_id}",
                "Specification-Vendor": "vazkii",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "${config.mod_id}",
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"vazkii",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
}


uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

defaultTasks 'clean', 'runData', 'checkSyntax', 'build', 'incrementBuildNumber'